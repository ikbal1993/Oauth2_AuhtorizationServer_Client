package com.demo.server;

import java.util.UUID;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.oauth2.core.ClientAuthenticationMethod;
import org.springframework.security.oauth2.core.oidc.OidcScopes;
import org.springframework.security.oauth2.server.authorization.client.InMemoryRegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClient;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.config.ProviderSettings;
import org.springframework.security.web.SecurityFilterChain;

@Configuration(proxyBeanMethods = false)
public class AuthorizedServer {

	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);
		http.formLogin(Customizer.withDefaults());
		return http.build();
	}

	RegisteredClientRepository clientRepository() {
		RegisteredClient register = RegisteredClient.withId(UUID.randomUUID().toString()).clientId("client")
				.clientSecret("secret").authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
				.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
				.redirectUri("http://127.0.0.1:8080/login/oauth2/code/api-client")
				.redirectUri("http://127.0.0.1:8080/authorized").scope(OidcScopes.OPENID).scope("read").build();

		return new InMemoryRegisteredClientRepository(register);
	}

	ProviderSettings providerSettings() {
		return providerSettings().builder().issuer("http://localhosy:9090").build();
	}
}
